{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","showLoading","setShowLoading","useEffect","a","axios","get","then","result","console","log","catch","error","fetchData","Spinner","animation","role","className","row1","map","value","index","row2","row3","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAqFeA,MAhFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEyBF,oBAAS,GAFlC,mBAENG,EAFM,KAEOC,EAFP,KAmBb,OAdAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,sDAChBC,IAAMC,IAJK,6BAKRC,MAAK,SAAAC,GACJC,QAAQC,IAAI,eAAeF,EAAOT,MAClCC,EAAQQ,EAAOT,MACfG,GAAe,MACdS,OAAM,SAACC,GACRH,QAAQC,IAAI,sBAAuBE,MAPvB,2CAAH,qDAUfC,KACC,IAGD,+BACoB,IAAhBZ,EACE,gCACGA,GAAe,cAACa,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAAjC,SACd,sBAAMC,UAAU,UAAhB,0BAGF,oDACA,kEACA,+CACA,kDACA,oDAEA,wBAAOA,UAAU,YAAjB,UACE,gCACE,+BACE,wCACA,wCACA,6CAIJ,gCAEE,+BACE,oBAAIA,UAAU,SAAd,SACIlB,EAAKmB,KAAKC,KAAI,SAACC,EAAOC,GAAR,OACd,4BAAgBD,GAARC,QAGZ,oBAAIJ,UAAU,SAAd,SACElB,EAAKuB,KAAKH,KAAI,SAACC,EAAOC,GAAR,OACd,4BAAgBD,GAARC,QAGV,oBAAIJ,UAAU,SAAd,SACElB,EAAKwB,KAAKJ,KAAI,SAACC,EAAOC,GAAR,OACd,4BAAgBD,GAARC,mBAWpB,8BACGpB,GAAe,cAACa,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAAjC,SACd,sBAAMC,UAAU,UAAhB,2CC/DGO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.acdb5846.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './App.css';\n//\nfunction App() {\n  const [data, setData] = useState({});\n  const [showLoading, setShowLoading] = useState(true);\n  const apiUrl = \"http://localhost:3000/run\";\n  //runs once after the first rendering of page\n  useEffect(() => {\n    const fetchData = async () => {\n      axios.get(apiUrl)\n        .then(result => {\n          console.log('result.data:',result.data)\n          setData(result.data)\n          setShowLoading(false)\n        }).catch((error) => {\n          console.log('error in fetchData:', error)\n        });\n      };  \n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      { showLoading === false\n        ? <div>\n            {showLoading && <Spinner animation=\"border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner> }\n              \n            <h1>Prediction Results</h1>\n            <h2> the values for species will be:</h2>\n            <li>setosa: 1,0,0</li> \n            <li>virginica: 0,1,0</li>\n            <li>versicolor: 0,0,1 </li>\n\n            <table className=\"App-table\">\n              <thead>\n                <tr>\n                  <th>Test 1</th>\n                  <th>Test 2</th>\n                  <th>Test 3</th>\n                </tr>\n              </thead>\n              \n              <tbody>\n                \n                <tr>\n                  <td className=\"App-td\">\n                    { data.row1.map((value, index) => (\n                      <p key={index}>{value}</p>\n                    ))}\n                  </td>\n                  <td className=\"App-td\">\n                  { data.row2.map((value, index) => (\n                    <p key={index}>{value}</p>\n                  ))}\n                  </td>\n                  <td className=\"App-td\">\n                  { data.row3.map((value, index) => (\n                    <p key={index}>{value}</p>\n                  ))}\n                  </td>\n\n                </tr>\n              </tbody>\n            </table>\n\n              \n          </div>\n        : \n        < div>\n          {showLoading && <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Waiting for results...</span>\n          </Spinner> }\n        </div>\n\n      }\n    </div>\n\n  );\n}\n//\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}